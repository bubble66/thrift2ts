import genAst from './genAst'
import path from 'path'
import fs from 'fs'

const header = '/*\r * Auto generated by Thrift2Ts.\r */\r\r';

// Principles

//- filename: name.thrift -> nameService.ts

//- include 'Common.thrift' -> import * as Common from './CommonService'
//- enum -> enum
//- struct/union/exception -> interface

//- map -> {[key: string]: type}
//- list/set -> type[]
//- i16/i32/i64/double -> number
//- bool -> boolean
//- string -> string
//- byte -> byte
//- binary -> binary
//- const -> const
//- void -> void
//- typedef/namespace (drop)
//- service (explode functions, (service name).(function name) -> rpc method string)
//- extends -> extends
//- required/optional -> type/tyep?


const includesHandler = (includes: object[]): string => {
    let imports = '';
    Object.values(includes).forEach(include => {
        let includePath = path.resolve(include.value);
        if (!/(.*)\.thrift$/i.test(includePath)) {
            includePath += '.thrift';
        }
        let ast = genAst(fs.readFileSync(includePath));
    });
}

module.exports = (ast: object): string => {
    let code = '';

    if (ast.include) {
        code += includesHandler(ast.include);
    }
    // imports enum

    return code;
}