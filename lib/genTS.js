"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const helpers_1 = require("./helpers");
const header = `/**\r * Auto generated by Thrift2Ts.\r *\r * ${(new Date()).toString()}\r */\r\r`;
exports.default = (ast, Request = './request') => {
    let code = '';
    code += header;
    const defaultExports = [];
    const simplifyType = (type) => {
        if (typeof type === 'string') {
            return type;
        }
        switch (type.name.toLowerCase()) {
            case 'map':
            case 'list':
            case 'set':
                return type;
            default:
                return type.name.toString();
        }
    };
    const valueTypeTransformer = (type) => {
        type = simplifyType(type);
        if (typeof type === 'string') {
            switch (type) {
                case 'i16':
                case 'i32':
                case 'i64':
                case 'double':
                    return 'number';
                case 'bool':
                    return 'boolean';
                default:
                    return type;
            }
        }
        switch (type['name']) {
            case 'map':
                return `{[key: ${type['keyType']}]: ${valueTypeTransformer(type['valueType'])}}`;
            case 'list':
            case 'set':
                return `${valueTypeTransformer(type['valueType'])}[]`;
        }
        throw new Error(`Unexpected value type: ${JSON.stringify(type)}`);
    };
    const valueTransformer = (value, isMap = false) => {
        if (typeof value === 'string') {
            return `\"${value}\"`;
        }
        if (['number', 'boolean'].indexOf(typeof value) > -1) {
            return value.toString();
        }
        if (value instanceof Array) {
            if (isMap) {
                return `{${value.map(v => valueTransformer(v)).join(', ')}}`;
            }
            return `[${value.map(v => valueTransformer(v)).join(', ')}]`;
        }
        if (typeof value === 'object' && value['key'] !== undefined && value['value'] !== undefined) {
            return `"${value['key']}": ${valueTransformer(value['value'])}`;
        }
        throw new Error(`Unexpected value: ${JSON.stringify(value)}`);
    };
    const includesHandler = (includes) => {
        let imports = '';
        Object.keys(includes).map(key => includes[key]).forEach(include => {
            imports += `\r\nimport * as ${helpers_1.getThriftFileName(include.value)} from "${helpers_1.thrift2TsPath(include.value)}";\r\n`;
        });
        return imports;
    };
    const constsHandler = (consts) => {
        let newConsts = '';
        Object.keys(consts).forEach(key => {
            newConsts += `\r\nexport const ${key}: ${valueTypeTransformer(consts[key]['type'])} = ${valueTransformer(consts[key]['value'], typeof consts[key]['type'] === 'object' && consts[key]['type']['name'] === 'map')}; \r\n`;
        });
        return newConsts;
    };
    const enumsHandler = (enums) => {
        let newEnums = '';
        Object.keys(enums).forEach(key => {
            newEnums += enumHandler(key, enums[key]['items']);
        });
        return newEnums;
    };
    const enumHandler = (name, items) => {
        let lastValue = -1;
        let code = `\r\nexport enum ${name} {`;
        items.forEach((item, index) => {
            if (item['value'] === undefined) {
                item['value'] = lastValue + 1;
            }
            lastValue = item['value'];
            code += `\r\n    ${item['name']} = ${item['value']}`;
            if (index < items.length - 1) {
                code += ',';
            }
        });
        code += '\r\n}\r\n';
        return code;
    };
    const structsLikeHandler = (values) => {
        let interfaces = '';
        Object.keys(values).forEach(key => {
            interfaces += structLikeHandler(key, values[key]);
        });
        return interfaces;
    };
    const structLikeHandler = (name, items) => {
        let code = `\r\nexport interface ${name} {`;
        items.forEach((item, index) => {
            code += `\r\n    ${item['name']}`;
            if (item['option'] === 'optional') {
                code += '?';
            }
            code += `: ${valueTypeTransformer(item['type'])};`;
        });
        code += '\r\n}\r\n';
        return code;
    };
    const servicesHandler = (services) => {
        let code = '';
        Object.keys(services).forEach(key => {
            code += serviceHandler(key, services[key]);
        });
        return code;
    };
    const serviceHandler = (name, service) => {
        let code = '';
        let functions = service['functions'];
        Object.keys(functions).forEach(key => {
            code += serviceFunctionHandler(name, functions[key]);
        });
        return code;
    };
    const serviceFunctionHandler = (name, serviceFunc) => {
        let code = '';
        const method = `${name}.${serviceFunc['name']}`;
        const returnType = valueTypeTransformer(serviceFunc['type']);
        let args = serviceFunc['args'];
        let argNames = [];
        let argNameAndTypes = [];
        args.forEach(arg => {
            argNames.push(arg['name']);
            argNameAndTypes.push(`${arg['name']}: ${valueTypeTransformer(arg['type'])}`);
        });
        code += `\r\nexport function ${serviceFunc['name']}(${argNameAndTypes.join(', ')}): Promise<${returnType}> {\r\n`;
        code += `    return Request<${returnType}>("${method}", { ${argNames.join(', ')} })`;
        code += '\r\n}\r\n';
        defaultExports.push(serviceFunc['name']);
        return code;
    };
    const defaultExportsHandler = () => {
        let code = '\r\n\r\nexport default {\r\n';
        defaultExports.forEach((v, i) => {
            code += `    ${v}`;
            if (i < defaultExports.length - 1) {
                code += ',';
            }
            code += '\r\n';
        });
        code += '}\r\n';
        return code;
    };
    if (Request && ast.service) {
        code += `import Request from "${Request}";\r\n`;
    }
    if (ast.include) {
        code += includesHandler(ast.include);
    }
    if (ast.const) {
        code += constsHandler(ast.const);
    }
    if (ast.enum) {
        code += enumsHandler(ast.enum);
    }
    if (ast.exception) {
        code += structsLikeHandler(ast.exception);
    }
    if (ast.struct) {
        code += structsLikeHandler(ast.struct);
    }
    if (ast.union) {
        code += structsLikeHandler(ast.union);
    }
    if (ast.service) {
        code += servicesHandler(ast.service);
    }
    if (ast.service) {
        code += defaultExportsHandler();
    }
    return code;
};
